{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to FederEI","text":"<p>FederEI is a federated library matching solution for EI-MS-based compound identification.  It establishes a server-to-server connection framework seamlessly integrated into a user-friendly front-end software.  By keeping data localized within each laboratory's server, FederEI minimizes the need for sharing  sensitive spectral information across multiple entities, thus mitigating privacy concerns.    </p> <p>Here is the workflow: The user submits mass spectrometry data through the user interface (UI),  and FederEI dispatches it to the central-server. Upon reception, the central-server distributes  the file to all client-server(s) based on their respective IP addresses stored in the client-server registry.  Subsequently, each client-server searches for results in its local database using library matching algorithm  and transmits them back to the central-server. The central-server tallies the received search results for the  file until all client-servers have responded. Finally, central-server organizes and summarizes the results,  and return the final results to the corresponding user.</p> <p></p>"},{"location":"#documentation","title":"Documentation","text":"<ul> <li>Installation and Deployment</li> <li>User Guide</li> <li>Advanced Usage</li> </ul>"},{"location":"#sources-on-github","title":"Sources on GitHub","text":"<p>FederEI GitHub</p>"},{"location":"#changelog","title":"Changelog","text":"<ul> <li>verision 1.0: first release at 2024.04.30</li> </ul>"},{"location":"#citations","title":"Citations","text":"<ul> <li>Yang, Q., Ji, H., Xu, Z. et al. Ultra-fast and accurate electron ionization mass spectrum matching for compound identification with million-scale in-silico library. Nat Commun 14, 3722 (2023)</li> </ul>"},{"location":"#contact","title":"Contact","text":"<ul> <li>jihongchao@caas.cn</li> </ul>"},{"location":"Advanced_Usage/","title":"Advanced Usage","text":""},{"location":"Advanced_Usage/#adding-a-client-server","title":"Adding a Client-Server","text":"<p>To add the Client-Server,please follow the steps outlined in the Installation document after starting the Center-Server. Once the Client is launched, it will be automatically registered in the Center-Server's registry table and begin functioning.</p>"},{"location":"Advanced_Usage/#changing-the-library","title":"Changing the Library","text":"<p>To change the library, follow these steps:</p> <p>If it's already running, you'll need to stop it first and detach the container.</p> <pre><code>docker attach container_id\ncrtl+c\ncrtl+p,crtl+q\n</code></pre> <p>Then, copy the library into the container and restart it.</p> <pre><code>docker cp your_library_path container_id:/app\ndocker attach container_id\npython3.8 /app/client.py central_ip center_port1 center_port2 client_ip client_port1 client_port2 database_name\n</code></pre>"},{"location":"Advanced_Usage/#library-format","title":"Library format","text":"<p>Library data supports .pickle and .mgf types.The program will automatically generate the vectors required for searching based on the provided Library. The following information for each compound in the Library is required when returning results,ensure that each compound in the Library contains at least this information: </p> <pre><code>SMILES\nCompound Name\n</code></pre> <p>If you want to modify the information returned in the search results, you can follow the format below to modify the information returned in Client.py for mgf results:</p> <pre><code>mgf_data['compound_name']=sorted_cleaned_pkl_data[I[index1][index2]].metadata['compound_name']\nmgf_data['smiles']=sorted_cleaned_pkl_data[I[index1][index2]].metadata['smiles']\n</code></pre>"},{"location":"Installation_and_Deployment/","title":"Installation and Deployment","text":""},{"location":"Installation_and_Deployment/#deployment-of-central-server","title":"Deployment of central-server","text":"<p>Pull the Docker image, which contains the environment and code required for execution:</p> <pre><code>docker pull kpbl1/federei:v1\n</code></pre> <p>Retrieve the IP address of the current machine for later use:</p> <p>For Linux:</p> <pre><code>ifconfig\n</code></pre> <p>For Windows:</p> <pre><code>ipconfig\n</code></pre> <p>Open two TCP ports on the machine for listening, for example, ports 5000 and 5001.  Port 1 is designated for client registration, while port 2 is for users to send files.</p> <p>If your machine's firewall is managed by iptables, execute:</p> <pre><code>sudo iptables -A INPUT -p tcp --dport port1 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport port2 -j ACCEPT\n</code></pre> <p>If the firewall is managed by firewalld, execute:</p> <pre><code>sudo firewall-cmd --zone=public --add-port=port1/tcp --permanent\nsudo firewall-cmd --zone=public --add-port=port2/tcp --permanent\nsudo firewall-cmd --reload\n</code></pre> <p>Run the central server:</p> <pre><code>docker run -i -p port1:port1 -p port2:port2 federei:v1\npython3.8 /app/center.py your_ip_address port1 port2\n</code></pre>"},{"location":"Installation_and_Deployment/#deployment-of-client-server","title":"Deployment of client-server","text":"<p>The client server should be launched after the central server. You'll need the central IP and  port information to start it. Once the client server is running, it will be automatically added  to the registry table.</p> <p>Pull the Docker image containing the environment and code:</p> <pre><code>docker pull kpbl1/federei:v1\n</code></pre> <p>Retrieve the IP address of the current machine for later use:</p> <p>For Linux:</p> <pre><code>ifconfig\n</code></pre> <p>For Windows:</p> <pre><code>ipconfig\n</code></pre> <p>Open two TCP ports on the machine for listening, for example, ports 5000 and 5001.</p> <p>If your machine's firewall is managed by iptables, execute:</p> <pre><code>sudo iptables -A INPUT -p tcp --dport port1 -j ACCEPT\nsudo iptables -A INPUT -p tcp --dport port2 -j ACCEPT\n</code></pre> <p>If the firewall is managed by firewalld, execute:</p> <pre><code>sudo firewall-cmd --zone=public --add-port=port1/tcp --permanent\nsudo firewall-cmd --zone=public --add-port=port2/tcp --permanent\nsudo firewall-cmd --reload\n</code></pre> <p>Run the client: Launch the container in the background and copy the database into it:</p> <pre><code>docker run -d -p port1:port1 -p port2:port2 federei:v1\n</code></pre> <p>Identify the ID of the container that was started:</p> <pre><code>docker ps\n</code></pre> <p>Then copy the database into it:</p> <pre><code>docker cp your_database_path container_id:/app\n</code></pre> <p>Attach to this container and run the server. The database_name is the last item of your_database_path:</p> <pre><code>docker attach container_id\npython3.8 /app/client.py central_ip center_port1 center_port2 client_ip client_port1 client_port2 database_name\n</code></pre>"},{"location":"Installation_and_Deployment/#installation-of-user-interface","title":"Installation of user-interface","text":"<p>Download the software from the following link:</p> <p>https://github.com/wustjie/wustjie.github.io/releases/tag/FederEI</p>"},{"location":"User_Guide/","title":"User Guide","text":""},{"location":"User_Guide/#preparation-of-input-file","title":"Preparation of input file","text":"<p>We now support CSV, TXT, and MGF data types.</p> <p>CSV data type appears as follows:</p> <pre><code>192,0.02\n193,0.15\n194,14.38\n195,1.89\n196,0.19\n</code></pre> <p>TXT data type appears as follows:</p> <pre><code>107.0 0.0034\n108.0 0.0015 \n109.0 0.0288 \n110.0 1.0 \n111.0 0.0726 \n112.0 0.0068\n</code></pre> <p>MGF data type should contain at least the COMPOUND_NAME attribute.</p> <pre><code>BEGIN IONS\nCOMPOUND_NAME=substance_A\n108.0 0.0015 \n109.0 0.0288 \n110.0 1.0 \n111.0 0.0726 \n112.0 0.0068\nEND IONS\n\nBEGIN IONS\nCOMPOUND_NAME=substance_B\n213.0 0.0013 \n215.0 0.0382 \n216.0 1.0 \n217.0 0.1182 \n218.0 0.9887\n219.0 0.0896\n220.0 0.0073 \nEND IONS\n</code></pre> <p>Example data can be found here:  Example Data</p>"},{"location":"User_Guide/#operation-sequence","title":"Operation sequence","text":"<ul> <li>First, set the central IP and port.</li> <li>Second, input query data.</li> <li>Third, wait and view the result.</li> </ul>"},{"location":"User_Guide/#interpretation-of-results","title":"Interpretation of results","text":"<p>Clicking the query data will display the results. Clicking on a result will show a comparison of mass spectra.  The compound structure will also be displayed.</p>"},{"location":"User_Guide/#operation-demonstration","title":"Operation demonstration","text":""},{"location":"User_Guide/#saving-results","title":"Saving results","text":"<p>Result files will automatically be saved in the same folder as the FederEI.exe file. </p> <p>The filename consists of a random number and the query time, designed to prevent overlapping results with the same name.</p> <p>The file content includes the query results for all compounds. This .mgf file contains the following information:</p> <pre><code>smiles\ncompound_name\ndistance\norigin_name\nms\n</code></pre> <p>SMILES, compound_name, and MS come from the corresponding compounds in the Library, while \"distance\" indicates the gap between the queried compound and the corresponding compound in the Library. \"origin_name\" is the name of the queried compound. If .csv or .txt file is used for the query, it corresponds to the filename; if an .mgf file is used, it corresponds to the original compound name.</p>"}]}